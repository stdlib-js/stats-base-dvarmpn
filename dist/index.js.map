{
  "version": 3,
  "sources": ["../lib/dvarmpn.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array provided a known mean and using Neely's correction algorithm.\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} mean - mean\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dvarmpn( x.length, 1.0/3.0, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction dvarmpn( N, mean, correction, x, stride ) {\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mean;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += stride;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = dvarmpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array provided a known mean and using Neely's correction algorithm.\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} mean - mean\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dvarmpn( N, 1.25, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dvarmpn( N, mean, correction, x, stride, offset ) {\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mean;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += stride;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = dvarmpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dvarmpn = require( './dvarmpn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dvarmpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dvarmpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a double-precision floating-point strided array provided a known mean and using Neely's correction algorithm.\n*\n* @module @stdlib/stats-base-dvarmpn\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dvarmpn = require( '@stdlib/stats-base-dvarmpn' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* var v = dvarmpn( x.length, 1.0/3.0, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dvarmpn = require( '@stdlib/stats-base-dvarmpn' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dvarmpn.ndarray( N, 1.25, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dvarmpn;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdvarmpn = main;\n} else {\n\tdvarmpn = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dvarmpn;\n\n// exports: { \"ndarray\": \"dvarmpn.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA6CA,SAASC,EAASC,EAAGC,EAAMC,EAAYC,EAAGC,EAAS,CAClD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIE,EACHF,GAAK,GAAKS,GAAK,EACnB,MAAO,KAER,GAAKT,IAAM,GAAKI,IAAW,EAC1B,MAAO,GASR,IAPKA,EAAS,EACbC,GAAM,EAAEL,GAAKI,EAEbC,EAAK,EAENC,EAAK,EACLC,EAAI,EACEG,EAAI,EAAGA,EAAIV,EAAGU,IACnBF,EAAIL,EAAGE,CAAG,EAAIJ,EACdK,GAAME,EAAIA,EACVD,GAAKC,EACLH,GAAMD,EAEP,OAAQE,EAAGG,EAAOF,EAAEP,GAAIO,EAAEE,EAC3B,CAKAX,EAAO,QAAUC,IC/EjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAgDA,SAASC,EAASC,EAAGC,EAAMC,EAAYC,EAAGC,EAAQC,EAAS,CAC1D,IAAIC,EACAC,EACAC,EACAC,EACA,EACAC,EAGJ,GADA,EAAIV,EAAIE,EACHF,GAAK,GAAK,GAAK,EACnB,MAAO,KAER,GAAKA,IAAM,GAAKI,IAAW,EAC1B,MAAO,GAKR,IAHAE,EAAKD,EACLE,EAAK,EACLC,EAAI,EACEE,EAAI,EAAGA,EAAIV,EAAGU,IACnBD,EAAIN,EAAGG,CAAG,EAAIL,EACdM,GAAME,EAAIA,EACVD,GAAKC,EACLH,GAAMF,EAEP,OAAQG,EAAG,EAAOC,EAAER,GAAIQ,EAAE,EAC3B,CAKAV,EAAO,QAAUC,IC9EjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAU,IACVC,EAAU,IAKdF,EAAaC,EAAS,UAAWC,CAAQ,EAKzCH,EAAO,QAAUE,ICcjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAUD,EAEVC,EAAUC,EAMX,OAAO,QAAUD",
  "names": ["require_dvarmpn", "__commonJSMin", "exports", "module", "dvarmpn", "N", "mean", "correction", "x", "stride", "ix", "M2", "M", "d", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "dvarmpn", "N", "mean", "correction", "x", "stride", "offset", "ix", "M2", "M", "d", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dvarmpn", "ndarray", "join", "tryRequire", "isError", "main", "dvarmpn", "tmp"]
}
